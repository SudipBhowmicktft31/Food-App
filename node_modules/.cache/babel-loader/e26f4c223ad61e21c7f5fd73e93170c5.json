{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sudip Bhowmick\\\\Desktop\\\\ReactApp\\\\FoodApp\\\\src\\\\Store\\\\CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from \"react\";\nimport CartContext from \"./cart-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n}; //InitialState\n\nconst cartReducer = (prevState, action) => {\n  if (action.type === \"ADD\") {\n    const updatedTotalAmount = prevState.totalAmount + action.item.price * action.item.amount;\n    const existingCartItemIndex = prevState.items.findIndex(item => item.id === action.item.id);\n    const existingCartItem = prevState.items[existingCartItemIndex];\n    let updatedItems;\n\n    if (existingCartItem) {\n      const updatedItem = { ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount\n      };\n      updatedItems = [...prevState, items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    } else {\n      updatedItems = prevState.item.concat(action.item);\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  return defaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, cartDispatherAction] = useReducer(cartReducer, defaultCartState); //arguments are reducerFn and InitialState\n\n  const addItemToCartHandler = item => {\n    cartDispatherAction({\n      type: \"ADD\",\n      item: item\n    });\n  };\n\n  const removeItemFromCartHandler = id => {\n    cartDispatherAction({\n      type: \"REMOVE\",\n      id: id\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItems: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartProvider, \"gOfUTMFz4wzqe89shT70kZ7oHdI=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["C:/Users/Sudip Bhowmick/Desktop/ReactApp/FoodApp/src/Store/CartProvider.js"],"names":["React","useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","prevState","action","type","updatedTotalAmount","item","price","amount","existingCartItemIndex","findIndex","id","existingCartItem","updatedItems","updatedItem","concat","CartProvider","props","cartState","cartDispatherAction","addItemToCartHandler","removeItemFromCartHandler","cartContext","addItems","removeItem","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,WAAP,MAAwB,gBAAxB;;AAEA,MAAMC,gBAAgB,GAAG;AACvBC,EAAAA,KAAK,EAAE,EADgB;AAEvBC,EAAAA,WAAW,EAAE;AAFU,CAAzB,C,CAGG;;AACH,MAAMC,WAAW,GAAG,CAACC,SAAD,EAAYC,MAAZ,KAAuB;AACzC,MAAIA,MAAM,CAACC,IAAP,KAAgB,KAApB,EAA2B;AACzB,UAAMC,kBAAkB,GACtBH,SAAS,CAACF,WAAV,GAAwBG,MAAM,CAACG,IAAP,CAAYC,KAAZ,GAAoBJ,MAAM,CAACG,IAAP,CAAYE,MAD1D;AAEA,UAAMC,qBAAqB,GAAGP,SAAS,CAACH,KAAV,CAAgBW,SAAhB,CAC3BJ,IAAD,IAAUA,IAAI,CAACK,EAAL,KAAYR,MAAM,CAACG,IAAP,CAAYK,EADN,CAA9B;AAGA,UAAMC,gBAAgB,GAAGV,SAAS,CAACH,KAAV,CAAgBU,qBAAhB,CAAzB;AACA,QAAII,YAAJ;;AACA,QAAGD,gBAAH,EAAoB;AACjB,YAAME,WAAW,GAAC,EACb,GAAGF,gBADU;AAEbJ,QAAAA,MAAM,EAACI,gBAAgB,CAACJ,MAAjB,GAAwBL,MAAM,CAACG,IAAP,CAAYE;AAF9B,OAAlB;AAICK,MAAAA,YAAY,GAAC,CAAC,GAAGX,SAAJ,EAAcH,KAAd,CAAb;AACAc,MAAAA,YAAY,CAACJ,qBAAD,CAAZ,GAAoCK,WAApC;AACH,KAPD,MAOK;AACDD,MAAAA,YAAY,GAAGX,SAAS,CAACI,IAAV,CAAeS,MAAf,CAAsBZ,MAAM,CAACG,IAA7B,CAAf;AACH;;AACD,WAAO;AACLP,MAAAA,KAAK,EAAEc,YADF;AAELb,MAAAA,WAAW,EAAEK;AAFR,KAAP;AAID;;AACD,SAAOP,gBAAP;AACD,CAzBD;;AA0BA,MAAMkB,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC9B,QAAM,CAACC,SAAD,EAAYC,mBAAZ,IAAmCvB,UAAU,CACjDK,WADiD,EAEjDH,gBAFiD,CAAnD,CAD8B,CAI3B;;AAEH,QAAMsB,oBAAoB,GAAId,IAAD,IAAU;AACrCa,IAAAA,mBAAmB,CAAC;AAAEf,MAAAA,IAAI,EAAE,KAAR;AAAeE,MAAAA,IAAI,EAAEA;AAArB,KAAD,CAAnB;AACD,GAFD;;AAGA,QAAMe,yBAAyB,GAAIV,EAAD,IAAQ;AACxCQ,IAAAA,mBAAmB,CAAC;AAAEf,MAAAA,IAAI,EAAE,QAAR;AAAkBO,MAAAA,EAAE,EAAEA;AAAtB,KAAD,CAAnB;AACD,GAFD;;AAGA,QAAMW,WAAW,GAAG;AAClBvB,IAAAA,KAAK,EAAEmB,SAAS,CAACnB,KADC;AAElBC,IAAAA,WAAW,EAAEkB,SAAS,CAAClB,WAFL;AAGlBuB,IAAAA,QAAQ,EAAEH,oBAHQ;AAIlBI,IAAAA,UAAU,EAAEH;AAJM,GAApB;AAMA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEC,WAA7B;AAAA,cACGL,KAAK,CAACQ;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAvBD;;GAAMT,Y;;KAAAA,Y;AAwBN,eAAeA,YAAf","sourcesContent":["import React, { useReducer } from \"react\";\r\nimport CartContext from \"./cart-context\";\r\n\r\nconst defaultCartState = {\r\n  items: [],\r\n  totalAmount: 0,\r\n}; //InitialState\r\nconst cartReducer = (prevState, action) => {\r\n  if (action.type === \"ADD\") {\r\n    const updatedTotalAmount =\r\n      prevState.totalAmount + action.item.price * action.item.amount;\r\n    const existingCartItemIndex = prevState.items.findIndex(\r\n      (item) => item.id === action.item.id\r\n    );\r\n    const existingCartItem = prevState.items[existingCartItemIndex];\r\n    let updatedItems;\r\n    if(existingCartItem){\r\n       const updatedItem={\r\n            ...existingCartItem,\r\n            amount:existingCartItem.amount+action.item.amount\r\n        };\r\n        updatedItems=[...prevState,items];\r\n        updatedItems[existingCartItemIndex]=updatedItem;\r\n    }else{\r\n        updatedItems = prevState.item.concat(action.item);\r\n    }\r\n    return {\r\n      items: updatedItems,\r\n      totalAmount: updatedTotalAmount,\r\n    };\r\n  }\r\n  return defaultCartState;\r\n};\r\nconst CartProvider = (props) => {\r\n  const [cartState, cartDispatherAction] = useReducer(\r\n    cartReducer,\r\n    defaultCartState\r\n  ); //arguments are reducerFn and InitialState\r\n\r\n  const addItemToCartHandler = (item) => {\r\n    cartDispatherAction({ type: \"ADD\", item: item });\r\n  };\r\n  const removeItemFromCartHandler = (id) => {\r\n    cartDispatherAction({ type: \"REMOVE\", id: id });\r\n  };\r\n  const cartContext = {\r\n    items: cartState.items,\r\n    totalAmount: cartState.totalAmount,\r\n    addItems: addItemToCartHandler,\r\n    removeItem: removeItemFromCartHandler,\r\n  };\r\n  return (\r\n    <CartContext.Provider value={cartContext}>\r\n      {props.children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\nexport default CartProvider;\r\n"]},"metadata":{},"sourceType":"module"}